<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Variable
holes = global.holes
pSeed = holes
// Posisi 
player = 1; //global.player;
action = 1;
inHand = 0;  //jumlah biji
hPick = false;  //status mengambil

hPos = 0;   //posisi lubang saat ini
hLine = 1;  //posisi line saat ini
oPos = 0;    //posisi lubang berlawanan
oLine = 0;   //posisi line berlawanan
tPos = 0;    //posisi lubang target
tLine = 0;   //posisi line target

pScore = false;
pNembak = false;
pMikul = false;
pCheck = false;

// Posisi Shadow
playerS = 2;  //
actionS = 1;
inHandS = 0;  //jumlah biji
hPickS = false;  //status mengambil

hPosS = 0;   //posisi lubang saat ini
hLineS = 1;  //posisi line saat ini
oPosS = 0;    //posisi lubang berlawanan
oLineS = 0;   //posisi line berlawanan
tPosS = 0;    //posisi lubang target
tLineS = 0;   //posisi line target

//check
//hOption[0] = 0;

hMatch = 0;
opt = 0
checker = 0;
sort = 0;
choice = 0

//checker lubang
cHole1= 0;
cHole2= 0;

cPos = 1;
cLine = 1;

//checker lubang Shadow
cHole1S= 0;
cHole2S= 0;

cPosS = 0;
cLineS = 1;

// timing
spd = 10;
pSpeed = 0;
dSpeed = 4;
tDelay = 60;
seconds = 0;

secondsS = 0;


/// Hole

//posisi lubang
hy[0] = 200;
hy[1] = 260;
hy[2] = 140;



switch (global.holes)
{
    case 5 : 
                            ; hole[2,0] = 0    ;
        hole[1,1] = pSeed   ; hole[2,1] = pSeed;
        hole[1,2] = pSeed   ; hole[2,2] = pSeed;
        hole[1,3] = pSeed   ; hole[2,3] = 0;
        hole[1,4] = pSeed   ; hole[2,4] = pSeed;
        hole[1,5] = pSeed   ; hole[2,5] = pSeed;
        hole[1,6] = 0       ; 
        
        hx[0] = 150;
        hx[1] = 200;
        hx[2] = 250;
        hx[3] = 300;
        hx[4] = 350;
        hx[5] = 400;
        hx[6] = 450;
        
        instance_create(hx[1],hy[player],but_h1);
        instance_create(hx[2],hy[player],but_h2);
        instance_create(hx[3],hy[player],but_h3);
        instance_create(hx[4],hy[player],but_h4);
        instance_create(hx[5],hy[player],but_h5);

        instance_create(hx[1],hy[playerS],but_h1);
        instance_create(hx[2],hy[playerS],but_h2);
        instance_create(hx[3],hy[playerS],but_h3);
        instance_create(hx[4],hy[playerS],but_h4);
        instance_create(hx[5],hy[playerS],but_h5);

        break;
        
    case 6 : 
                            ; hole[2,0] = 0    ;
        hole[1,1] = pSeed   ; hole[2,1] = pSeed;
        hole[1,2] = pSeed   ; hole[2,2] = pSeed;
        hole[1,3] = pSeed   ; hole[2,3] = pSeed;
        hole[1,4] = pSeed   ; hole[2,4] = pSeed;
        hole[1,5] = pSeed   ; hole[2,5] = pSeed;
        hole[1,6] = pSeed   ; hole[2,6] = pSeed;
        hole[1,7] = 0       ;
        
        hx[0] = 125;
        hx[1] = 175;
        hx[2] = 225;
        hx[3] = 275;
        hx[4] = 325;
        hx[5] = 375;
        hx[6] = 425;
        hx[7] = 475;
       
        instance_create(hx[1],hy[player],but_h1);
        instance_create(hx[2],hy[player],but_h2);
        instance_create(hx[3],hy[player],but_h3);
        instance_create(hx[4],hy[player],but_h4);
        instance_create(hx[5],hy[player],but_h5);
        instance_create(hx[6],hy[player],but_h6);

        instance_create(hx[1],hy[playerS],but_h1);
        instance_create(hx[2],hy[playerS],but_h2);
        instance_create(hx[3],hy[playerS],but_h3);
        instance_create(hx[4],hy[playerS],but_h4);
        instance_create(hx[5],hy[playerS],but_h5);
        instance_create(hx[6],hy[playerS],but_h6);

        break;
        
    case 7 : 
        
                            ; hole[2,0] = 0    ;
        hole[1,1] = pSeed   ; hole[2,1] = pSeed;
        hole[1,2] = pSeed   ; hole[2,2] = pSeed;
        hole[1,3] = pSeed   ; hole[2,3] = pSeed;
        hole[1,4] = pSeed   ; hole[2,4] = pSeed;
        hole[1,5] = pSeed   ; hole[2,5] = pSeed;
        hole[1,6] = pSeed   ; hole[2,6] = pSeed;
        hole[1,7] = pSeed   ; hole[2,7] = pSeed;
        hole[1,8] = 0       ; 
    
        hx[0] = 100;
        hx[1] = 150;
        hx[2] = 200;
        hx[3] = 250;
        hx[4] = 300;
        hx[5] = 350;
        hx[6] = 400;
        hx[7] = 450;
        hx[8] = 500;
        
        instance_create(hx[1],hy[player],but_h1);
        instance_create(hx[2],hy[player],but_h2);
        instance_create(hx[3],hy[player],but_h3);
        instance_create(hx[4],hy[player],but_h4);
        instance_create(hx[5],hy[player],but_h5);
        instance_create(hx[6],hy[player],but_h6);
        instance_create(hx[7],hy[player],but_h7);
        
        instance_create(hx[1],hy[playerS],but_h1);
        instance_create(hx[2],hy[playerS],but_h2);
        instance_create(hx[3],hy[playerS],but_h3);
        instance_create(hx[4],hy[playerS],but_h4);
        instance_create(hx[5],hy[playerS],but_h5);
        instance_create(hx[6],hy[playerS],but_h6);
        instance_create(hx[7],hy[playerS],but_h7);

        break;
        
    case 9 : 
                            ; hole[2,0] = 0    ;
        hole[1,1] = pSeed   ; hole[2,1] = pSeed;
        hole[1,2] = pSeed   ; hole[2,2] = pSeed;
        hole[1,3] = pSeed   ; hole[2,3] = pSeed;
        hole[1,4] = pSeed   ; hole[2,4] = pSeed;
        hole[1,5] = pSeed   ; hole[2,5] = pSeed;
        hole[1,6] = pSeed   ; hole[2,6] = pSeed;
        hole[1,7] = pSeed   ; hole[2,7] = pSeed;
        hole[1,8] = pSeed   ; hole[2,8] = pSeed;
        hole[1,9] = pSeed   ; hole[2,9] = pSeed;
        hole[1,10] = 0      ;  


                                
        hx[0] = 50;
        hx[1] = 100;
        hx[2] = 150;
        hx[3] = 200;
        hx[4] = 250;
        hx[5] = 300;
        hx[6] = 350;
        hx[7] = 400;
        hx[8] = 450;
        hx[9] = 500;
        hx[10] = 550;
        
        instance_create(hx[1],hy[player],but_h1);
        instance_create(hx[2],hy[player],but_h2);
        instance_create(hx[3],hy[player],but_h3);
        instance_create(hx[4],hy[player],but_h4);
        instance_create(hx[5],hy[player],but_h5);
        instance_create(hx[6],hy[player],but_h6);
        instance_create(hx[7],hy[player],but_h7);
        instance_create(hx[8],hy[player],but_h8);
        instance_create(hx[9],hy[player],but_h9);
        
        instance_create(hx[1],hy[playerS],but_h1);
        instance_create(hx[2],hy[playerS],but_h2);
        instance_create(hx[3],hy[playerS],but_h3);
        instance_create(hx[4],hy[playerS],but_h4);
        instance_create(hx[5],hy[playerS],but_h5);
        instance_create(hx[6],hy[playerS],but_h6);
        instance_create(hx[7],hy[playerS],but_h7);
        instance_create(hx[8],hy[playerS],but_h8);
        instance_create(hx[9],hy[playerS],but_h9);

        break;
}
//instance_create(hx[0],hy[player],but_h01); 
//instance_create(hx[0],hy[playerS],but_h02);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Positioning

///Delta Time

global.delta = delta_time*0.00006
pSpeed = ceil((spd*global.delta)/dSpeed)

pSpeedS = ceil((spd*global.delta)/dSpeed)

// timing movement
if (global.autoMove = true &amp;&amp; action != 1 &amp;&amp; action != 4)or
    (global.autoMove = false  &amp;&amp; action != 4)
{
    // move speed
    if (pSpeed == 0)
    {
        seconds = 0;
    }
    else
    {
        seconds += pSpeed;
        //show_debug_message(seconds)
    }
}

// posisi hole trigger     

if action == 1 and hPick = true or action == 2 or action == 3//(inHand != 0)
{        
    but_h01.visible = true
    but_h01.x = hx[tPos];        

    if (tPos &gt; 0 and tPos &lt;= holes)
    {
        but_h01.y = hy[tLine];   
    }
    if (tPos = 0 or tPos &gt; holes)
    {
         but_h01.y = hy[0];        
    }
    
}
else
{
    //but_h01.visible = false
}


   /*
    if (inHandS != 0)
    {        
        but_h02.visible = true
        but_h02.x = hx[tPosS];        
    
        if (tPosS &gt; 0 and tPosS &lt;= holes)
        {
            but_h02.y = hy[tLineS];   
        }
        else
        {
            but_h02.y = hy[0];        
        }
        
    }
    else
    {
        //but_h01.visible = false
    }

    /*
if (action == 4 and pCheck == true)
{
    for ( var h = (holes*2); h&gt;0; h--)
    {
        if (cLine == 1)
        {
            cHole1 += hole[cLine,cPos]
        }
        else
        {
            cHole2 += hole[cLine,cPos]
        }
        if cPos &gt; holes
        {
            cPos = 1;
            cLine = 2;
        }
        else
        {
            cPos++ ;
        }      
    }
    pCheck = 0;
    cPos = 1;
    cLine = 1;
}
/*    
    if (hPick == true)
    {
        if (player == 1)
        {
            tPos = hPos+1;
            tLine = 1;
        }
        else
        {
            tPos = hPos-1;
            tLine = 2;
        }
    }  
}
/*
// Target Position
if (action == 2 and inHand &gt; 0 and seconds &gt;= pSpeed)
{
    
    if (tLine == 1)
    {
        tPos ++;
        if (player == tLine)
        {
            // target position
            if (tPos &gt; holes+1)
            {
                tLine = 2;   
                tPos = holes;
            }
        }
        else
        {
            // target position
            if (tPos &gt; holes)
            {
                tLine = 2;   
                tPos = holes;
            }
        }
    }
    else
    {
        tPos --;
        if (player == tLine)
        {
        
            // target position
            if (tPos &lt; 0)
            {
                tLine = 1;   
                tPos = 1;
            }
        }
        else
        {
            // target position
            if (tPos == 0)
            {
                tLine = 1;
                tPos = 1;
            }        
        }
    }  
        
    but_h01.x = hx[tPos];        

    if (tPos &gt; 0 and tPos &lt;= holes)
    {
        but_h01.y = hy[tLine];   
    }
    else
    {
        but_h01.y = hy[0];        
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Pre Action
if (action == 1)
{
    seconds = 0;
    if (hPick == false)// or hPickS == false)
    {
        if device_mouse_check_button_released(0, mb_left) 
        {    
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h1)
            {
              
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 1;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 1;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h2)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 2;
                    
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }               
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 2;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h3)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 3;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }               
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 3;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h4)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 4;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }             
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 4;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h5)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 5;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }            
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 5;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h6)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 6;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }               
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 6;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h7)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 7;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }             
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 7;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h8)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 8;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }           
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 8;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
            if position_meeting(device_mouse_x(0), device_mouse_y(0),but_h9)
            {
                if mouse_y &gt; room_height/2 &amp;&amp; player == 1
                {
                    hPos = 9;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }               
                }
                if mouse_y &lt; room_height/2 &amp;&amp; player == 2
                {
                    hPos = 9;
                    
                    if (hole[player,hPos] &gt; 0)
                    {
                        hPick = true;                
                    }                  
                }
            }
        }          
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action
// Action 1 | Pick Up

if (action == 1)
{          
    if (hPick == true)
    {
        if (player == 1)
        {
            hLine = 1;
            oLine = 2;                        
            tLine = 1;            
        }
        else
        {
            hLine = 2;    
            oLine = 1;
                                
            tLine = 2;
        }             
        if global.autoMove = true
        {
            tPos = hPos;
        }
        else
        {
            if (player == 1)
            {
                tPos = hPos+1;
            }
            else
            {
                tPos = hPos-1;
            }
        }        

        if (hole[player,hPos] != 0)          
        {                        
            oPos = hPos;
            inHand = hole[hLine,hPos];
            hole[hLine,hPos] = 0;
            
            if (tPos &gt; 0 &amp;&amp; tPos &lt;= holes)
            {
                instance_create(hx[tPos],hy[player],but_h01);   
            }
            else
            {
                instance_create(hx[tPos],hy[0],but_h01);   
            }
        }
        else
        {
            if global.autoMove = true
            {
                hPick = false;
                
                action = 2;  
                seconds = 0    
            }
            else if (global.autoMove = false)
            {
                //seconds = 0                     
                if (device_mouse_check_button(0, mb_left) &amp;&amp;
                    position_meeting(device_mouse_x(0), device_mouse_y(0),but_h01))     
                {
                    hPick = false;
                    action = 2;  
                    
                }  
            }                 
        }               
    }  
}

// action 2 | movement

if (action == 2)
{
    // movement
    if ((global.autoMove = true &amp;&amp; seconds &gt;= tDelay) or 
        (global.autoMove = false) &amp;&amp; device_mouse_check_button(0, mb_left) &amp;&amp;
        position_meeting(device_mouse_x(0), device_mouse_y(0),but_h01))
    {
        if (inHand &gt; 0)
        {
            // movement pada line 1
            scr_move()  
            
            if (global.autoMove = false&amp;&amp; inHand &gt; 1 or global.autoMove = true)
            {
                scr_retarget()            
            }   
            // target

                inHand--;
                hole[hLine,hPos] += 1;
                
                                                               
        }
        
        
               
               
        // cek counter Line
        if (hLine == 1)
        {
            oLine = 2;
        }
        else
        {
            oLine = 1;
        }  
        
        
        oPos = hPos                               
        seconds = 0; 
        if (inHand == 0) 
        {
            
            action = 3;   
        }
    }
}     
// Deteksi status      
if (action == 3 &amp;&amp; seconds &gt;= tDelay)
{
   
    // masuk lumbung &amp; nambah
    // player 1
    if (hPos == holes+1)
    {                              
        seconds = 0;
        action = 4;         
        
        pScore = true; 
        pCheck = true;  
    }
    // player 2
    else if (hPos == 0)
    {        
        seconds = 0;
        action = 4;
        
        pScore = true;
        pCheck = true;  
    }    
    // cek nambah, nembak atau mati
    else if (hPos &gt; 0 &amp;&amp; hPos &lt;= holes)
    {            
        // nambah
        if (hole[hLine,hPos] &gt; 1)
        {

            inHand = hole[hLine,hPos];
            hole[hLine,hPos] = 0;   

            // target line
            scr_retarget()
            
            seconds = 0;
            action = 2;
        }                
        if player == hLine
        {    
            // nembak
            if (hole[hLine,hPos] = 1 &amp;&amp; hole[oLine,oPos] &gt;= 1)
            {        
                seconds = 0;
                action = 4;
                
                pNembak = true;                     
            }
            // mati
            else if (hole[hLine,hPos] = 1 &amp;&amp; hole[oLine,oPos] == 0)
            {
                seconds = 0;
                action = 4;
                
                pCheck = true;
            }                
        }
        else
        {
             // cek ganti giliran
            if (global.mikul == false)
            {
                if (hole[hLine,hPos] = 1)
                {   
                    seconds = 0;
                    action = 4;
                    
                    pCheck = true;
                }
            }
            // cek mikul        
            else
            {
                // cek kondisi lubang potensi
                if  (hPos &gt; 1 &amp;&amp; hPos &lt; holes)
                {
                    // mikul
                    if (hole[hLine,hPos] = 1)
                    {
                        if (hole[hLine,hPos-1] &gt; 0 &amp;&amp; hole[hLine,hPos+1] &gt; 0)
                        {
                            seconds = 0;
                            action = 4
                            
                            pMikul = true;          
                        }
                        else
                        {
                            seconds = 0;
                            action = 4;
                            
                            pCheck = true;
                        }
                    }                                   
                }
                else
                {
                    if (hole[hLine,hPos] = 1)
                    {
                        seconds = 0;
                        action = 4;
                        
                        pCheck = true;                   
                    }
                }
            }
        }
    }        
}
// Eksekusi
if (action == 4)// &amp;&amp; seconds &gt;= tDelay)
{
// Nembak
    if (pNembak == true)
    {
        if (hole[hLine,hPos] &gt; 0 )
        {
            hole[hLine,hPos]-- ;
            inHand++ ;
        }
        else if (hole[oLine,oPos] &gt; 0 )
        {
            hole[oLine,oPos]-- ;
            inHand++ ;
        }
        else if (hole[oLine,oPos] = 0)
        {
            if (inHand &gt; 0)
                if (player == 1)
                {                
                    hole[hLine,holes+1]++ ;
                    inHand-- ;
                }
                else
                {
                    hole[hLine,0]++ ;
                    inHand-- ;
                }
            else
            {
                pNembak = false;
                pCheck = true;
            }
        }
        
    }
// Mikul
    if (pMikul == true)
    {
        if (hole[hLine,hPos-1] &gt; 0)
        {
            hole[hLine,hPos-1]-- ; 
            inHand ++ ;
        }        
        if (hole[hLine,hPos+1] &gt; 0)
        {
            hole[hLine,hPos+1]-- ; 
            inHand ++ ;
        }
        if (hole[hLine,hPos-1] == 0 &amp;&amp; hole[hLine,hPos+1] == 0 &amp;&amp; inHand &gt; 0) 
        {
            if (player == 1)
            {                
                hole[player,holes+1]++ ;
                inHand-- ;
            }
            else
            {
                hole[player,0]++ ;
                inHand-- ;
            }   
        }
        else if (inHand == 0)
        {
            pMikul = false;
            pCheck = true ;
        }
    }
// hole check
    if (pCheck == true)
    {
        for ( var h = (holes); h&gt;0; h--)
        {
            cHole1 += hole[1,cPos];
            cHole2 += hole[2,cPos];
            if (cPos &lt; holes)
            {
                cPos++;
            }                             
        }       
        
        cPos = 1;
        cLine = 1;
        
        tPos = 0;
        tLine = player;
        pCheck = false;
        
        action = 5;
    }
    
}
// decision maker
if (action == 5 &amp;&amp; seconds &gt;= tDelay)
{
    if (cHole1 &gt; 0 &amp;&amp; cHole2 &gt;0)
    {
        if (pScore == true)
        {
            action = 1;
            pScore = false;
        }
        else
        {
            
            if (player == 1)
            {
                player = 2;
            }
            else
            {
                player = 1;
            }
             // ANIMASI GANTI PEMAIN DISINI !!
            
        }
        
        cHole1 = 0;
        cHole2 = 0;
        action = 1;
    }
    else if (cHole1 == 0 &amp;&amp; hPick == false)
    {
        hPos = holes;
        hLine = 2;
        
        hPick = true
    }
    else if (cHole2 == 0 &amp;&amp; hPick == false)
    {
        hPos = 1;
        hLine = 1;
        
        hPick = true   
    }    
    if (hPick == true)
    {
        if (hPos &gt; 0 &amp;&amp; hPos &lt;= holes)
        {
            if (hole[hLine,hPos] &gt; 0)
            {
                hole[hLine,hPos]-- ;
                if (hLine == 1)
                {
                    hole[1,holes+1] += 1 ;
                }
                else
                {
                    hole[2,0] += 1 ;
                    
                }
                //hole[hLine,holes+1] += 1 ;                                             
            }            
            else if (hole[hLine,hPos] == 0)
            {                
                if (hLine == 1)
                {
                    hPos++ ;
                }
                else
                {
                    hPos-- ;                    
                }
            }                              
        }
        else
        {
            hPos = holes+1;
            hLine = 1;
            
            hPosS = 0;
            hLineS = 2;    
             
            seconds = 0;
            action = 7; 
            
            hPick = false;
            hPickS = false;
                                       
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fo_16)
draw_set_color(c_black)

draw_set_halign(fa_left)
draw_set_valign(fa_middle)

draw_text(20, 20, "PLAYER = "+string(player))
draw_text(20, 40, "INHAND = "+string(inHand))

draw_set_halign(fa_center)
switch (holes)
{
    case 5 :
        draw_text(hx[1], hy[1], string(hole[1,1]));
        draw_text(hx[2], hy[1], string(hole[1,2]));
        draw_text(hx[3], hy[1], string(hole[1,3]));
        draw_text(hx[4], hy[1], string(hole[1,4]));
        draw_text(hx[5], hy[1], string(hole[1,5]));
        draw_text(hx[6], hy[0], string(hole[1,6]));
        
        draw_text(hx[5], hy[2], string(hole[2,5]));
        draw_text(hx[4], hy[2], string(hole[2,4]));
        draw_text(hx[3], hy[2], string(hole[2,3]));
        draw_text(hx[2], hy[2], string(hole[2,2]));
        draw_text(hx[1], hy[2], string(hole[2,1]));
        draw_text(hx[0], hy[0], string(hole[0,0]));
        
        break;
        
    case 6 :
        draw_text(hx[1], hy[1], string(hole[1,1]));
        draw_text(hx[2], hy[1], string(hole[1,2]));
        draw_text(hx[3], hy[1], string(hole[1,3]));
        draw_text(hx[4], hy[1], string(hole[1,4]));
        draw_text(hx[5], hy[1], string(hole[1,5]));
        draw_text(hx[6], hy[1], string(hole[1,6]));
        draw_text(hx[7], hy[0], string(hole[1,7]));
        
        draw_text(hx[6], hy[2], string(hole[2,6]));
        draw_text(hx[5], hy[2], string(hole[2,5]));
        draw_text(hx[4], hy[2], string(hole[2,4]));
        draw_text(hx[3], hy[2], string(hole[2,3]));
        draw_text(hx[2], hy[2], string(hole[2,2]));
        draw_text(hx[1], hy[2], string(hole[2,1]));
        draw_text(hx[0], hy[0], string(hole[2,0]));
        
        break;
            
    case 7 :
        draw_text(hx[1], hy[1], string(hole[1,1]));
        draw_text(hx[2], hy[1], string(hole[1,2]));
        draw_text(hx[3], hy[1], string(hole[1,3]));
        draw_text(hx[4], hy[1], string(hole[1,4]));
        draw_text(hx[5], hy[1], string(hole[1,5]));
        draw_text(hx[6], hy[1], string(hole[1,6]));
        draw_text(hx[7], hy[1], string(hole[1,7]));
        draw_text(hx[8], hy[0], string(hole[1,8]));
        
        draw_text(hx[7], hy[2], string(hole[2,7]));
        draw_text(hx[6], hy[2], string(hole[2,6]));
        draw_text(hx[5], hy[2], string(hole[2,5]));
        draw_text(hx[4], hy[2], string(hole[2,4]));
        draw_text(hx[3], hy[2], string(hole[2,3]));
        draw_text(hx[2], hy[2], string(hole[2,2]));
        draw_text(hx[1], hy[2], string(hole[2,1]));
        draw_text(hx[0], hy[0], string(hole[2,0]));
        
        break;
        
    case 9 :
        draw_text(hx[1], hy[1], string(hole[1,1]));
        draw_text(hx[2], hy[1], string(hole[1,2]));
        draw_text(hx[3], hy[1], string(hole[1,3]));
        draw_text(hx[4], hy[1], string(hole[1,4]));
        draw_text(hx[5], hy[1], string(hole[1,5]));
        draw_text(hx[6], hy[1], string(hole[1,6]));
        draw_text(hx[7], hy[1], string(hole[1,7]));
        draw_text(hx[8], hy[1], string(hole[1,8]));
        draw_text(hx[9], hy[1], string(hole[1,9]));
        draw_text(hx[10], hy[0], string(hole[1,10]));
        
        draw_text(hx[9], hy[2], string(hole[2,9]));
        draw_text(hx[8], hy[2], string(hole[2,8]));
        draw_text(hx[7], hy[2], string(hole[2,7]));
        draw_text(hx[6], hy[2], string(hole[2,6]));
        draw_text(hx[5], hy[2], string(hole[2,5]));
        draw_text(hx[4], hy[2], string(hole[2,4]));
        draw_text(hx[3], hy[2], string(hole[2,3]));
        draw_text(hx[2], hy[2], string(hole[2,2]));
        draw_text(hx[1], hy[2], string(hole[2,1]));
        draw_text(hx[0], hy[0], string(hole[2,0]));
        
        break;
}      
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
